/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** this schema represents the employee information */
@org.apache.avro.specific.AvroGenerated
public class EmployeeEvent extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -1534707442278229318L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EmployeeEvent\",\"namespace\":\"com.avro\",\"doc\":\"this schema represents the employee information\",\"fields\":[{\"name\":\"id\",\"type\":\"int\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"department\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"salary\",\"type\":\"float\"},{\"name\":\"lastworkingday\",\"type\":\"long\"},{\"name\":\"designation\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<EmployeeEvent> ENCODER =
            new BinaryMessageEncoder<EmployeeEvent>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<EmployeeEvent> DECODER =
            new BinaryMessageDecoder<EmployeeEvent>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<EmployeeEvent> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<EmployeeEvent> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<EmployeeEvent>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this EmployeeEvent to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a EmployeeEvent from a ByteBuffer. */
    public static EmployeeEvent fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated public int id;
    @Deprecated public java.lang.String name;
    @Deprecated public java.lang.String department;
    @Deprecated public float salary;
    @Deprecated public long lastworkingday;
    @Deprecated public java.lang.String designation;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public EmployeeEvent() {}

    /**
     * All-args constructor.
     * @param id The new value for id
     * @param name The new value for name
     * @param department The new value for department
     * @param salary The new value for salary
     * @param lastworkingday The new value for lastworkingday
     * @param designation The new value for designation
     */
    public EmployeeEvent(java.lang.Integer id, java.lang.String name, java.lang.String department, java.lang.Float salary, java.lang.Long lastworkingday, java.lang.String designation) {
        this.id = id;
        this.name = name;
        this.department = department;
        this.salary = salary;
        this.lastworkingday = lastworkingday;
        this.designation = designation;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }
    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0: return id;
            case 1: return name;
            case 2: return department;
            case 3: return salary;
            case 4: return lastworkingday;
            case 5: return designation;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value="unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0: id = (java.lang.Integer)value$; break;
            case 1: name = (java.lang.String)value$; break;
            case 2: department = (java.lang.String)value$; break;
            case 3: salary = (java.lang.Float)value$; break;
            case 4: lastworkingday = (java.lang.Long)value$; break;
            case 5: designation = (java.lang.String)value$; break;
            default: throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'id' field.
     * @return The value of the 'id' field.
     */
    public java.lang.Integer getId() {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(java.lang.Integer value) {
        this.id = value;
    }

    /**
     * Gets the value of the 'name' field.
     * @return The value of the 'name' field.
     */
    public java.lang.String getName() {
        return name;
    }

    /**
     * Sets the value of the 'name' field.
     * @param value the value to set.
     */
    public void setName(java.lang.String value) {
        this.name = value;
    }

    /**
     * Gets the value of the 'department' field.
     * @return The value of the 'department' field.
     */
    public java.lang.String getDepartment() {
        return department;
    }

    /**
     * Sets the value of the 'department' field.
     * @param value the value to set.
     */
    public void setDepartment(java.lang.String value) {
        this.department = value;
    }

    /**
     * Gets the value of the 'salary' field.
     * @return The value of the 'salary' field.
     */
    public java.lang.Float getSalary() {
        return salary;
    }

    /**
     * Sets the value of the 'salary' field.
     * @param value the value to set.
     */
    public void setSalary(java.lang.Float value) {
        this.salary = value;
    }

    /**
     * Gets the value of the 'lastworkingday' field.
     * @return The value of the 'lastworkingday' field.
     */
    public java.lang.Long getLastworkingday() {
        return lastworkingday;
    }

    /**
     * Sets the value of the 'lastworkingday' field.
     * @param value the value to set.
     */
    public void setLastworkingday(java.lang.Long value) {
        this.lastworkingday = value;
    }

    /**
     * Gets the value of the 'designation' field.
     * @return The value of the 'designation' field.
     */
    public java.lang.String getDesignation() {
        return designation;
    }

    /**
     * Sets the value of the 'designation' field.
     * @param value the value to set.
     */
    public void setDesignation(java.lang.String value) {
        this.designation = value;
    }

    /**
     * Creates a new EmployeeEvent RecordBuilder.
     * @return A new EmployeeEvent RecordBuilder
     */
    public static org.example.model.EmployeeEvent.Builder newBuilder() {
        return new org.example.model.EmployeeEvent.Builder();
    }

    /**
     * Creates a new EmployeeEvent RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new EmployeeEvent RecordBuilder
     */
    public static org.example.model.EmployeeEvent.Builder newBuilder(org.example.model.EmployeeEvent.Builder other) {
        return new org.example.model.EmployeeEvent.Builder(other);
    }

    /**
     * Creates a new EmployeeEvent RecordBuilder by copying an existing EmployeeEvent instance.
     * @param other The existing instance to copy.
     * @return A new EmployeeEvent RecordBuilder
     */
    public static org.example.model.EmployeeEvent.Builder newBuilder(org.example.model.EmployeeEvent other) {
        return new org.example.model.EmployeeEvent.Builder(other);
    }

    /**
     * RecordBuilder for EmployeeEvent instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EmployeeEvent>
            implements org.apache.avro.data.RecordBuilder<EmployeeEvent> {

        private int id;
        private java.lang.String name;
        private java.lang.String department;
        private float salary;
        private long lastworkingday;
        private java.lang.String designation;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(org.example.model.EmployeeEvent.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.department)) {
                this.department = data().deepCopy(fields()[2].schema(), other.department);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.salary)) {
                this.salary = data().deepCopy(fields()[3].schema(), other.salary);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.lastworkingday)) {
                this.lastworkingday = data().deepCopy(fields()[4].schema(), other.lastworkingday);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.designation)) {
                this.designation = data().deepCopy(fields()[5].schema(), other.designation);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing EmployeeEvent instance
         * @param other The existing instance to copy.
         */
        private Builder(org.example.model.EmployeeEvent other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.id)) {
                this.id = data().deepCopy(fields()[0].schema(), other.id);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.name)) {
                this.name = data().deepCopy(fields()[1].schema(), other.name);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.department)) {
                this.department = data().deepCopy(fields()[2].schema(), other.department);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.salary)) {
                this.salary = data().deepCopy(fields()[3].schema(), other.salary);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.lastworkingday)) {
                this.lastworkingday = data().deepCopy(fields()[4].schema(), other.lastworkingday);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.designation)) {
                this.designation = data().deepCopy(fields()[5].schema(), other.designation);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public java.lang.Integer getId() {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder setId(int value) {
            validate(fields()[0], value);
            this.id = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder clearId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'name' field.
         * @return The value.
         */
        public java.lang.String getName() {
            return name;
        }

        /**
         * Sets the value of the 'name' field.
         * @param value The value of 'name'.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder setName(java.lang.String value) {
            validate(fields()[1], value);
            this.name = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'name' field has been set.
         * @return True if the 'name' field has been set, false otherwise.
         */
        public boolean hasName() {
            return fieldSetFlags()[1];
        }


        /**
         * Clears the value of the 'name' field.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder clearName() {
            name = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'department' field.
         * @return The value.
         */
        public java.lang.String getDepartment() {
            return department;
        }

        /**
         * Sets the value of the 'department' field.
         * @param value The value of 'department'.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder setDepartment(java.lang.String value) {
            validate(fields()[2], value);
            this.department = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'department' field has been set.
         * @return True if the 'department' field has been set, false otherwise.
         */
        public boolean hasDepartment() {
            return fieldSetFlags()[2];
        }


        /**
         * Clears the value of the 'department' field.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder clearDepartment() {
            department = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'salary' field.
         * @return The value.
         */
        public java.lang.Float getSalary() {
            return salary;
        }

        /**
         * Sets the value of the 'salary' field.
         * @param value The value of 'salary'.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder setSalary(float value) {
            validate(fields()[3], value);
            this.salary = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'salary' field has been set.
         * @return True if the 'salary' field has been set, false otherwise.
         */
        public boolean hasSalary() {
            return fieldSetFlags()[3];
        }


        /**
         * Clears the value of the 'salary' field.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder clearSalary() {
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'lastworkingday' field.
         * @return The value.
         */
        public java.lang.Long getLastworkingday() {
            return lastworkingday;
        }

        /**
         * Sets the value of the 'lastworkingday' field.
         * @param value The value of 'lastworkingday'.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder setLastworkingday(long value) {
            validate(fields()[4], value);
            this.lastworkingday = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'lastworkingday' field has been set.
         * @return True if the 'lastworkingday' field has been set, false otherwise.
         */
        public boolean hasLastworkingday() {
            return fieldSetFlags()[4];
        }


        /**
         * Clears the value of the 'lastworkingday' field.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder clearLastworkingday() {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'designation' field.
         * @return The value.
         */
        public java.lang.String getDesignation() {
            return designation;
        }

        /**
         * Sets the value of the 'designation' field.
         * @param value The value of 'designation'.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder setDesignation(java.lang.String value) {
            validate(fields()[5], value);
            this.designation = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'designation' field has been set.
         * @return True if the 'designation' field has been set, false otherwise.
         */
        public boolean hasDesignation() {
            return fieldSetFlags()[5];
        }


        /**
         * Clears the value of the 'designation' field.
         * @return This builder.
         */
        public org.example.model.EmployeeEvent.Builder clearDesignation() {
            designation = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public EmployeeEvent build() {
            try {
                EmployeeEvent record = new EmployeeEvent();
                record.id = fieldSetFlags()[0] ? this.id : (java.lang.Integer) defaultValue(fields()[0]);
                record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
                record.department = fieldSetFlags()[2] ? this.department : (java.lang.String) defaultValue(fields()[2]);
                record.salary = fieldSetFlags()[3] ? this.salary : (java.lang.Float) defaultValue(fields()[3]);
                record.lastworkingday = fieldSetFlags()[4] ? this.lastworkingday : (java.lang.Long) defaultValue(fields()[4]);
                record.designation = fieldSetFlags()[5] ? this.designation : (java.lang.String) defaultValue(fields()[5]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<EmployeeEvent>
            WRITER$ = (org.apache.avro.io.DatumWriter<EmployeeEvent>)MODEL$.createDatumWriter(SCHEMA$);

    @Override public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<EmployeeEvent>
            READER$ = (org.apache.avro.io.DatumReader<EmployeeEvent>)MODEL$.createDatumReader(SCHEMA$);

    @Override public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
